https://neon.tech/postgresql/postgresql-getting-started/postgresql-sample-database
-----------------------------------------------------------------
SELECT Queries
List all films with their length and rental rate, sorted by length descending.
Columns: title, length, rental_rate
SELECT title, length, rental_rate FROM film ORDER BY length DESC


  Find the top 5 customers who have rented the most films.
Hint: Use the rental and customer tables.
SELECT
    r.customer_id,
    MAX(CONCAT(c.first_name, ' ', c.last_name)) AS CustomerName,
    COUNT(*) AS RentalCount
FROM
    public.rental r
JOIN
    public.customer c ON c.customer_id = r.customer_id
GROUP BY
    r.customer_id
ORDER BY
    RentalCount DESC
LIMIT 5;

Display all films that have never been rented.
Hint: Use LEFT JOIN between film and inventory → rental.
select 
	f.film_id, 
	f.title 
from film f
left outer join inventory i on i.film_id = f.film_id
where i.inventory_id is null

JOIN Queries
List all actors who appeared in the film ‘Academy Dinosaur’.
Tables: film, film_actor, actor
SELECT a.actor_id, first_name ||' '|| last_name as name 
FROM film_actor fa JOIN actor a ON a.actor_id = fa.actor_id
WHERE fa.film_id = (SELECT film_id FROM film WHERE title= 'Academy Dinosaur');
List each customer along with the total number of rentals they made and the total amount paid.
Tables: customer, rental, payment


CTE-Based Queries
Using a CTE, show the top 3 rented movies by number of rentals.
Columns: title, rental_count
WITH cte_MoviesRentCount AS
(
	SELECT f.film_id, title, COUNT(*) FROM film f
	JOIN inventory i ON f.film_id = i.film_id
	JOIN rental r ON i.inventory_id = r.inventory_id
	GROUP BY f.film_id
	ORDER BY COUNT(*) DESC
)
SELECT * FROM cte_MoviesRentCount
LIMIT 3;
with rental_counts as
(
  select cu.customer_id, concat(cu.first_name,' ',cu.last_name) as customer_name, count(re.rental_id) as total_rentals from customer cu
  join rental re on re.customer_id = cu.customer_id
  group by cu.customer_id
),
average_rentals as (
select avg(total_rentals * 1.0) as avg_rentals from rental_counts
)
select rc.customer_id, rc.customer_name,rc.total_rentals,a.avg_rentals from rental_counts rc
join average_rentals a on rc.total_rentals>a.avg_rentals
order by rc.total_rentals desc;
Find customers who have rented more than the average number of films.
Use a CTE to compute the average rentals per customer, then filter.


 Function Questions
Write a function that returns the total number of rentals for a given customer ID.
Function: get_total_rentals(customer_id INT)
 CREATE OR REPLACE FUNCTION get_total_rentals(cust_id INT) 
 RETURNS INT AS 
 $$ 
 DECLARE total_rentals INT; 
 BEGIN 
 SELECT COUNT(*) INTO total_rentals FROM rental WHERE customer_id = cust_id; RETURN total_rentals; END; 
 $$ 
 LANGUAGE plpgsql

Stored Procedure Questions
Write a stored procedure that updates the rental rate of a film by film ID and new rate.
Procedure: update_rental_rate(film_id INT, new_rate NUMERIC)


Write a procedure to list overdue rentals (return date is NULL and rental date older than 7 days).
Procedure: get_overdue_rentals() that selects relevant columns.




-----------------------------------------------------
Cursor-Based Questions (5)
Write a cursor that loops through all films and prints titles longer than 120 minutes.

Create a cursor that iterates through all customers and counts how many rentals each made.

Using a cursor, update rental rates: Increase rental rate by $1 for films with less than 5 rentals.

Create a function using a cursor that collects titles of all films from a particular category.

Loop through all stores and count how many distinct films are available in each store using a cursor.

Trigger-Based Questions (5)
Write a trigger that logs whenever a new customer is inserted.

Create a trigger that prevents inserting a payment of amount 0.

Set up a trigger to automatically set last_update on the film table before update.

Create a trigger to log changes in the inventory table (insert/delete).

Write a trigger that ensures a rental can’t be made for a customer who owes more than $50.

Transaction-Based Questions (5)
Write a transaction that inserts a customer and an initial rental in one atomic operation.

Simulate a failure in a multi-step transaction (update film + insert into inventory) and roll back.

Create a transaction that transfers an inventory item from one store to another.

Demonstrate SAVEPOINT and ROLLBACK TO SAVEPOINT by updating payment amounts, then undoing one.

Write a transaction that deletes a customer and all associated rentals and payments, ensuring atomicity.