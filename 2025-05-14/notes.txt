https://www.postgresql.org/docs/current/backup.html
https://www.postgresql.org/docs/current/runtime-config-replication.html


Objective:
Create a stored procedure that inserts rental data on the primary server, and verify that changes replicate to the standby server. Add a logging mechanism to track each operation.

Tasks to Complete:
Set up streaming replication (if not already done):

Primary on port 5432

Standby on port 5433

Create a table on the primary:


CREATE TABLE rental_log (
    log_id SERIAL PRIMARY KEY,
    rental_time TIMESTAMP,
    customer_id INT,
    film_id INT,
    amount NUMERIC,
    logged_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Ensure this table is replicated.

Write a stored procedure to:

Insert a new rental log entry

Accept customer_id, film_id, amount as inputs

Wrap logic in a transaction with error handling (BEGIN...EXCEPTION...END)


CREATE OR REPLACE PROCEDURE sp_add_rental_log(
    p_customer_id INT,
    p_film_id INT,
    p_amount NUMERIC
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO rental_log (rental_time, customer_id, film_id, amount)
    VALUES (CURRENT_TIMESTAMP, p_customer_id, p_film_id, p_amount);
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error occurred: %', SQLERRM;
END;
$$;

Call the procedure on the primary:

CALL sp_add_rental_log(1, 100, 4.99);

On the standby (port 5433):

Confirm that the new record appears in rental_log

Run:SELECT * FROM rental_log ORDER BY log_id DESC LIMIT 1;

Add a trigger to log any UPDATE to rental_log

---------------------------------------


initdb -D "D:/pri"
initdb -D "D:/sec"


pg_ctl -D D:\pri -o "-p 5433" -l d:\pri\logfile start


>psql -p 5433 -d postgres -c "CREATE ROLE replicator with REPLICATION LOGIN PASSWORD 'repl_pass';"

pg_basebackup -D d:\sec -Fp -Xs -P -R -h 127.0.0.1 -U replicator -p 5433

pg_ctl -D D:\sec -o "-p 5435" -l d:\sec\logfile start

psql -p 5433 -d postgres 

(In another cmd)

psql -p 5435 -d postgres

--------------------------------------
5433 - 
select * from pg_stat_replication;
5435
select pg_is_in_recovery();
-------------------------------------
Create table in primary

Check in secondary
---------------------------------------------------------------------------



create or replace procedure proc_create_customer_rental_payment(
p_first_name text,p_last_name text, p_email text,p_address_id int, 
p_inventory_id int, p_store_is int,
p_staff_id int,p_amount numeric
)
Language plpgsql
as $$
DECLARE
    v_customer_id INT;
    v_rental_id INT;
BEGIN
  Begin
    INSERT INTO customer (store_id, first_name, last_name, email, address_id, active, create_date)
    VALUES (p_store_is,p_first_name,p_last_name,p_email,p_address_id, 1, CURRENT_DATE)
    RETURNING customer_id INTO v_customer_id;
 
    INSERT INTO rental (rental_date, inventory_id, customer_id, staff_id)
    VALUES (CURRENT_TIMESTAMP, p_inventory_id, v_customer_id, p_staff_id)
    RETURNING rental_id INTO v_rental_id;
    
    INSERT INTO payment (customer_id, staff_id, rental_id, amount, payment_date)
    VALUES (v_customer_id, p_staff_id, 100000, p_amount, CURRENT_TIMESTAMP);
  Exception when others then
    raise notice 'Transaction failed %',sqlerrm;
  End;
END; 
$$;

select * from customer order by customer_id  desc

call proc_create_customer_rental_payment ('Ram','Som','ram_som@gmail.com',1,1,1,1,-10)

--loop through all the films and update the rental rate by +1 for teh films when rental count < 5


create or replace procedure proc_update_rental_rate()
language plpgsql
as $$
declare
  rec record;
  cur_film_rent_count cursor for
  select f.film_id, f.rental_rate, count(r.rental_id) as rental_count 
  from film f left join inventory i on f.film_id = i.film_id
  left join rental r on i.inventory_id = r.inventory_id
  group by f.film_id, f.rental_rate;
Begin
  open cur_film_rent_count;

  Loop
  	Fetch cur_film_rent_count into rec;
	exit when not found;

	if rec.rental_count < 5 then
	   update film set rental_rate= rental_rate +1
	   where film_id =  rec.film_id;

	   raise notice 'updated file  with id % . The new rental rate is %',rec.film_id,rec.rental_rate+1;
	end if;
end loop;
close cur_film_rent_count;
end;
$$;

call proc_update_rental_rate();
----------------------------------------------------------------------------
