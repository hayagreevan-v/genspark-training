// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Twitter.Contexts;

#nullable disable

namespace Twitter.Migrations
{
    [DbContext(typeof(TwitterContext))]
    partial class TwitterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Twitter.Models.Follow", b =>
                {
                    b.Property<int>("FollowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FollowId"));

                    b.Property<int>("FollowedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("FollowerUserId")
                        .HasColumnType("integer");

                    b.HasKey("FollowId");

                    b.HasIndex("FollowedUserId");

                    b.HasIndex("FollowerUserId");

                    b.ToTable("follows");
                });

            modelBuilder.Entity("Twitter.Models.HashTag", b =>
                {
                    b.Property<int>("HashTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HashTagId"));

                    b.Property<string>("HashTagContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TweetId")
                        .HasColumnType("integer");

                    b.HasKey("HashTagId");

                    b.HasIndex("TweetId");

                    b.ToTable("hashtags");
                });

            modelBuilder.Entity("Twitter.Models.HashTag_Tweet", b =>
                {
                    b.Property<int>("HashTagTweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HashTagTweetId"));

                    b.Property<int>("HashTagId")
                        .HasColumnType("integer");

                    b.Property<int>("TweetId")
                        .HasColumnType("integer");

                    b.HasKey("HashTagTweetId");

                    b.HasIndex("HashTagId");

                    b.HasIndex("TweetId");

                    b.ToTable("hashtag_tweets");
                });

            modelBuilder.Entity("Twitter.Models.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LikeId"));

                    b.Property<int>("LikedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TweetId")
                        .HasColumnType("integer");

                    b.HasKey("LikeId");

                    b.HasIndex("LikedByUserId");

                    b.HasIndex("TweetId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("Twitter.Models.Tweet", b =>
                {
                    b.Property<int>("TweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TweetId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TweetId");

                    b.HasIndex("PostedByUserId");

                    b.ToTable("tweets");
                });

            modelBuilder.Entity("Twitter.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Twitter.Models.Follow", b =>
                {
                    b.HasOne("Twitter.Models.User", "Followed")
                        .WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twitter.Models.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Twitter.Models.HashTag", b =>
                {
                    b.HasOne("Twitter.Models.Tweet", null)
                        .WithMany("hashTags")
                        .HasForeignKey("TweetId");
                });

            modelBuilder.Entity("Twitter.Models.HashTag_Tweet", b =>
                {
                    b.HasOne("Twitter.Models.HashTag", "hashTag")
                        .WithMany()
                        .HasForeignKey("HashTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twitter.Models.Tweet", "tweet")
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hashTag");

                    b.Navigation("tweet");
                });

            modelBuilder.Entity("Twitter.Models.Like", b =>
                {
                    b.HasOne("Twitter.Models.User", "LikedByUser")
                        .WithMany()
                        .HasForeignKey("LikedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Twitter.Models.Tweet", "tweet")
                        .WithMany("likes")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikedByUser");

                    b.Navigation("tweet");
                });

            modelBuilder.Entity("Twitter.Models.Tweet", b =>
                {
                    b.HasOne("Twitter.Models.User", "PostByUser")
                        .WithMany("tweets")
                        .HasForeignKey("PostedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostByUser");
                });

            modelBuilder.Entity("Twitter.Models.Tweet", b =>
                {
                    b.Navigation("hashTags");

                    b.Navigation("likes");
                });

            modelBuilder.Entity("Twitter.Models.User", b =>
                {
                    b.Navigation("tweets");
                });
#pragma warning restore 612, 618
        }
    }
}
